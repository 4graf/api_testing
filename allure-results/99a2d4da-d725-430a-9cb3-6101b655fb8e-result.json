{"name": "Состояние сервера - запущен", "status": "failed", "statusDetails": {"message": "AssertionError: expected message: OK\nactual message: OК", "trace": "self = <tests.server_api.test_server.TestServer object at 0x00000276A54C5460>, server_steps = <steps.server_api.server_steps.ServerSteps object at 0x00000276A54971A0>\n\n    @allure.story('Состояние сервера')\n    @allure.title('Состояние сервера - запущен')\n    def test_server_state(self, server_steps):\n        response = server_steps.do_server_state()\n        assert_http_status_code(response=response, expected_code=200)\n        assert_json_header(response=response)\n    \n        state = ServerSchemasSteps.get_server_state(response)\n>       assert_server_state(server_state=state)\n\ntests\\server_api\\test_server.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nserver_state = ServerState(status_code=0, state='OК')\n\n    def assert_server_state(server_state: ServerState):\n        \"\"\"\n        Проверяет состояние сервера.\n    \n        :param server_state: Состояние сервера.\n        \"\"\"\n    \n        assert_internal_status_code(server_state, 0)\n        expected_state = 'OK'\n>       assert server_state.state == expected_state, \\\n            (f'expected message: {expected_state}\\n'\n             f'actual message: {server_state.state}\\n')\nE       AssertionError: expected message: OK\nE       actual message: OК\n\nassertions\\server_assertions.py:14: AssertionError"}, "steps": [{"name": "Проверка состояния сервера", "status": "passed", "steps": [{"name": "Отправка \"'GET'\" запроса на \"'/state'\"", "status": "passed", "parameters": [{"name": "method", "value": "'GET'"}, {"name": "url", "value": "'/state'"}, {"name": "params", "value": "None"}, {"name": "headers", "value": "None"}, {"name": "cookies", "value": "None"}, {"name": "auth", "value": "<httpx._client.UseClientDefault object at 0x00000276A3624C20>"}, {"name": "follow_redirects", "value": "<httpx._client.UseClientDefault object at 0x00000276A3624C20>"}, {"name": "timeout", "value": "<httpx._client.UseClientDefault object at 0x00000276A3624C20>"}, {"name": "extensions", "value": "None"}], "start": 1723569766227, "stop": 1723569766242}], "start": 1723569766227, "stop": 1723569766242}, {"name": "Получить данные с состоянием сервера из ответа", "status": "passed", "parameters": [{"name": "response", "value": "<Response [200 OK]>"}], "start": 1723569766242, "stop": 1723569766242}], "start": 1723569766227, "stop": 1723569766242, "uuid": "0af9afcc-cee6-48ce-8800-b6b8636520a7", "historyId": "d7b25709eba380f78cf7d61e282a4795", "testCaseId": "d7b25709eba380f78cf7d61e282a4795", "fullName": "tests.server_api.test_server.TestServer#test_server_state", "labels": [{"name": "epic", "value": "Сервер"}, {"name": "story", "value": "Состояние сервера"}, {"name": "feature", "value": "Состояние сервера"}, {"name": "parentSuite", "value": "tests.server_api"}, {"name": "suite", "value": "test_server"}, {"name": "subSuite", "value": "TestServer"}, {"name": "host", "value": "DESKTOP-QQNQKOJ"}, {"name": "thread", "value": "11904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.server_api.test_server"}]}